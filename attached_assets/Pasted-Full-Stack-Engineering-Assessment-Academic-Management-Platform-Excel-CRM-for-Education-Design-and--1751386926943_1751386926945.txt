Full Stack Engineering Assessment
Academic Management Platform (Excel CRM for Education)
Design and implement a scalable University CRM system with:
Role-based access control
Course lifecycle workflows
AI integrations (recommendations + syllabus generation)
Dockerized services
Bonus: Real-time and document generation features
Assessment Requirements
1. Authentication & Roles
JWT Auth for student, lecturer, admin
Register/Login with role selection
Role-specific dashboards & access control (RBAC middleware)
2.  Course Management
Lecturers: Create/update courses, upload syllabus (PDF, DOCX)
Students: Browse/enroll/drop courses
Admins: Approve/reject enrollments, assign lecturers
3. Assignment Workflow
Students submit assignments (upload or text)
Lecturers grade submissions (0‚Äì100 scale)
System auto-calculates course grades using weighted average
4. AI Assistant Integration
POST /ai/recommend: Suggests courses based on student interest
POST /ai/syllabus: Auto-generates syllabus based on topic input
Use OpenAI API (or mock service if unavailable)
System Design Requirements
Include a short system design document in the repo root (/SYSTEM_DESIGN.md) covering:
Architecture Diagram (microservices / monolith with modules)
Diagram tools like Lucidchart, Excalidraw, Whimsical, or Mermaid.js can be used.
üê≥ Dockerization Requirement
Provide a fully dockerized solution:
Dockerfile for backend and frontend
docker-compose.yml to orchestrate services:
frontend
backend
PostgreSQL
Sample .env.example for secrets and configs
All containers should spin up with docker-compose up
üíª Technical Stack
Frontend: React.js / Next.js
Pages:
/login
/dashboard (role-specific)
/courses
/ai-assistant


Features:
File upload (assignments)
Role-specific dashboards
Grades view
Admin course/user panels
Backend: NestJS / FastAPI
Models:
User { id, email, password, role }
Course { id, title, credits, lecturerId, syllabus }
Enrollment { id, courseId, studentId, status }
Assignment { id, courseId, studentId, file, grade }
Core Endpoints:
POST /auth/login
POST /courses/enroll
PUT /assignments/grade
POST /ai/recommend
POST /ai/syllabus
Database: PostgreSQL
ORMs: TypeORM / Prisma / SQLAlchemy
Bonus Features (Pick at least 1)
WebSockets: Real-time grade/enrollment notifications
Plagiarism Checker: AI or mocked similarity engine
Transcript Generator: Auto-generate PDF transcript with grades
Deliverables
Your GitHub repository must include:
/frontend         # React or Next.js
/backend          # NestJS or FastAPI
/docker-compose.yml
/.env.example
/SYSTEM_DESIGN.md
/README.md
README must include:
Setup instructions (local + Docker)
Sample credentials for roles
AI usage or mocking guide
Optional: live deployment link (Vercel + Render/Fly.io)
‚ö†Ô∏è Notes
You may use mocked OpenAI responses if no API key is available.
SQLite acceptable for local dev if PostgreSQL is unavailable.
A brief walkthrough may be requested if shortlisted.



